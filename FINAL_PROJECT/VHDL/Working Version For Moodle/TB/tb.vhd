-- VHDL Entity MIPS.MIPS_tb.symbol
--
-- Created:
--          by - kolaman.UNKNOWN (KOLAMAN-PC)
--          at - 09:22:45 17/02/2013
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2011.1 (Build 18)
--


ENTITY MIPS_tb IS
-- Declarations

END MIPS_tb ;

--
-- VHDL Architecture MIPS.MIPS_tb.struct
--
-- Created:
--          by - kolaman.UNKNOWN (KOLAMAN-PC)
--          at - 09:22:45 17/02/2013
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2011.1 (Build 18)
--
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;

LIBRARY work;

ARCHITECTURE struct OF MIPS_tb IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ALU_result_out  : STD_LOGIC_VECTOR( 31 DOWNTO 0 );
   SIGNAL Branch_out      : STD_LOGIC;
   SIGNAL Instruction_out : STD_LOGIC_VECTOR( 31 DOWNTO 0 );
   SIGNAL Memwrite_out    : STD_LOGIC;
   SIGNAL Regwrite_out    : STD_LOGIC;
   SIGNAL Zero_out        : STD_LOGIC;
   SIGNAL clock           : STD_LOGIC;
   SIGNAL read_data_1_out : STD_LOGIC_VECTOR( 31 DOWNTO 0 );
   SIGNAL read_data_2_out : STD_LOGIC_VECTOR( 31 DOWNTO 0 );
   SIGNAL reset           : STD_LOGIC;
   SIGNAL write_data_out  : STD_LOGIC_VECTOR( 31 DOWNTO 0 );
   	SIGNAL	IsTEST:  std_logic;
SIGNAL	PORT_LEDG:  std_logic_vector(7 DOWNTO 0);-- for IO
	SIGNAL	PORT_LEDR:  std_logic_vector(7 DOWNTO 0);-- for IO

SIGNAL sw_8_run:  std_logic; -- for IO
	SIGNAL	sw_0_7 :  std_logic_vector(7 DOWNTO 0); --for IO
	SIGNAL	HI_OUT:  std_logic_vector(7 DOWNTO 0); -- for IO
	SIGNAL	LO_OUT:  std_logic_vector(7 DOWNTO 0); -- for IO
		SIGNAL SEG0_OUT, SEG1_OUT:  std_logic_vector(6 DOWNTO 0); -- for IO
	SIGNAL	SEG2_OUT, SEG3_OUT:  std_logic_vector(6 DOWNTO 0); -- for
     SIGNAL   		PC_plus_4_oout 		:   	STD_LOGIC_VECTOR( 9 DOWNTO 0 );
     SIGNAL   			 isSpecial_out						:  STD_LOGIC;
     SIGNAL   			addr_out:  std_logic_vector(9 DOWNTO 0); -- for IO
     SIGNAL   				 J_out						:  STD_LOGIC;
     SIGNAL   						pc_oout								:   STD_LOGIC_VECTOR( 9 DOWNTO 0 );

     SIGNAL   				 Seven_Seg_out_top				: STD_LOGIC_VECTOR( 15 DOWNTO 0 );




   -- Component Declarations
   COMPONENT MIPS
   PORT (
		reset, clock : IN STD_LOGIC;
		-----------------------------------------------------------
		IsTEST : OUT std_logic;
		sw_8_run : IN std_logic; -- for IO
		sw_0_7 : IN std_logic_vector(7 DOWNTO 0); --for IO
		HI_OUT : OUT std_logic_vector(7 DOWNTO 0); -- for IO
		LO_OUT : OUT std_logic_vector(7 DOWNTO 0); -- for IO
		addr_out : OUT std_logic_vector(9 DOWNTO 0); -- for IO
		SEG0_OUT, SEG1_OUT : OUT std_logic_vector(6 DOWNTO 0); -- for IO
		SEG2_OUT, SEG3_OUT : OUT std_logic_vector(6 DOWNTO 0); -- for IO
		PORT_LEDG : OUT std_logic_vector(7 DOWNTO 0);-- for IO
		PORT_LEDR : OUT std_logic_vector(7 DOWNTO 0);-- for IO
		PC_plus_4_oout : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
		isSpecial_out : OUT STD_LOGIC;
		J_out : OUT STD_LOGIC;
		Seven_Seg_out_top : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		-----------------------------------------------------------
		-- Output important signals to pins for easy display in Simulator
		pc_oout : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
		ALU_result_out, read_data_1_out, read_data_2_out, write_data_out, Instruction_out : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		Branch_out, Zero_out, Memwrite_out, Regwrite_out : OUT STD_LOGIC
	);
   END COMPONENT;
   COMPONENT MIPS_tester
   PORT (
    				reset, clock : OUT STD_LOGIC;
		-----------------------------------------------------------
		IsTEST : IN std_logic;
		sw_8_run : OUT std_logic; -- for IO
		sw_0_7 : OUT std_logic_vector(7 DOWNTO 0); --for IO
		HI_OUT : IN std_logic_vector(7 DOWNTO 0); -- for IO
		LO_OUT : IN std_logic_vector(7 DOWNTO 0); -- for IO
		addr_out : IN std_logic_vector(9 DOWNTO 0); -- for IO
		SEG0_OUT, SEG1_OUT : IN std_logic_vector(6 DOWNTO 0); -- for IO
		SEG2_OUT, SEG3_OUT : IN std_logic_vector(6 DOWNTO 0); -- for IO
		PORT_LEDG : IN std_logic_vector(7 DOWNTO 0);-- for IO
		PORT_LEDR : IN std_logic_vector(7 DOWNTO 0);-- for IO
		PC_plus_4_oout : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
		isSpecial_out : IN STD_LOGIC;
		J_out : IN STD_LOGIC;
		Seven_Seg_out_top : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
		-----------------------------------------------------------
		-- Output important signals to pins for easy display in Simulator
		pc_oout : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
		ALU_result_out, read_data_1_out, read_data_2_out, write_data_out, Instruction_out : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		Branch_out, Zero_out, Memwrite_out, Regwrite_out : IN STD_LOGIC
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : MIPS USE ENTITY work.mips;
   FOR ALL : MIPS_tester USE ENTITY work.mips_tester;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : MIPS
      PORT MAP (
         reset           => reset,
         clock           => clock,
		 		IsTEST=>IsTEST,
addr_out=>addr_out,
		 sw_8_run=>sw_8_run,
		sw_0_7=>sw_0_7,
		HI_OUT=>HI_OUT,
		LO_OUT=>LO_OUT,
J_out=>J_out,
		SEG0_OUT=>SEG0_OUT,
		SEG1_OUT=>SEG1_OUT,
		SEG2_OUT=>SEG2_OUT,
		SEG3_OUT=>SEG3_OUT,
		PORT_LEDG=>PORT_LEDG,
isSpecial_out=>isSpecial_out,
PC_plus_4_oout=>PC_plus_4_oout,
		PORT_LEDR=>PORT_LEDR,
Seven_Seg_out_top=>Seven_Seg_out_top,
         ALU_result_out  => ALU_result_out,
         read_data_1_out => read_data_1_out,
         read_data_2_out => read_data_2_out,
         write_data_out  => write_data_out,
         Instruction_out => Instruction_out,
         Branch_out      => Branch_out,
         Zero_out        => Zero_out,
         Memwrite_out    => Memwrite_out,
         Regwrite_out    => Regwrite_out,
pc_oout=>pc_oout
      );
   U_1 : MIPS_tester
      PORT MAP (
J_out=>J_out,
         ALU_result_out  => ALU_result_out,
         Branch_out      => Branch_out,
isSpecial_out=>isSpecial_out,
         Instruction_out => Instruction_out,
         Memwrite_out    => Memwrite_out,
         Regwrite_out    => Regwrite_out,
Seven_Seg_out_top=>Seven_Seg_out_top,
         Zero_out        => Zero_out,
         read_data_1_out => read_data_1_out,
         read_data_2_out => read_data_2_out,
         write_data_out  => write_data_out,
         clock           => clock,
		 IsTEST=>IsTEST,
PC_plus_4_oout=>PC_plus_4_oout,
pc_oout=>pc_oout,
addr_out=>addr_out,
		 		 sw_8_run=>sw_8_run,
		sw_0_7=>sw_0_7,
		HI_OUT=>HI_OUT,
		LO_OUT=>LO_OUT,
		SEG0_OUT=>SEG0_OUT,
		SEG1_OUT=>SEG1_OUT,
		SEG2_OUT=>SEG2_OUT,
		SEG3_OUT=>SEG3_OUT,
		PORT_LEDG=>PORT_LEDG,
		PORT_LEDR=>PORT_LEDR,
         reset           => reset
      );

END struct;
